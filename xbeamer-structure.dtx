% \iffalse meta-comment
%
% File: xbeamer-structure.dtx Copyright (C) 2024,2025 Joseph Wright
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    https://www.latex-project.org/lppl.txt
%
% This file is part of the "xbeamer bundle" (The Work in LPPL)
% and all files in that bundle must be distributed together.
%
% The released version of this bundle is available from CTAN.
%
% -----------------------------------------------------------------------
%
% The development version of the bundle can be found at
%
%    https://github.com/josephwright/xbeamer
%
% for those people who are interested.
%
% -----------------------------------------------------------------------
%
%<*driver>
\documentclass{l3doc}
% Additional commands needed in this source
\NewDocumentCommand\email{m}{\href{mailto:#1}{\nolinkurl{#1}}}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% ^^A As we are dealing with a class, this has to be done manually
% \def\filedate{2025-03-19}
% \def\fileversion{v0.0.0}
%
% \title{^^A
%   \pkg{xbeamer-structure} -- Structural commands^^A
%   \thanks{This file describes \fileversion,
%     last revised \filedate.}^^A
% }
%
% \author{^^A
%  Joseph Wright^^A
%  \thanks{^^A
%    E-mail: \email{joseph@texdev.net}^^A
%   }^^A
% }
%
% \date{Released \filedate}
%
% \maketitle
%
% \begin{documentation}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{xbeamer-structure} implementation}
%
% Start the \pkg{DocStrip} guards.
%    \begin{macrocode}
%<*class>
%    \end{macrocode}
%
% Identify the internal prefix.
%    \begin{macrocode}
%<@@=xbeamer>
%    \end{macrocode}
%
% \begin{variable}
%   {
%     \l_@@_section_tl ,
%     \l_@@_subsection_tl ,
%     \l_@@_subsubsection_tl
%   }
%    \begin{macrocode}
\tl_new:N \l_@@_section_tl
\tl_new:N \l_@@_subsection_tl
\tl_new:N \l_@@_subsubsection_tl
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\section, \subsection, \subsubsection}
% \begin{macro}{\thesection, \thesubsection, \thesubsubsection}
%  Here, we need full \LaTeX{} counters, so create them using the appropriate
%  mechanism: that also means we can sort out counter dependency and the
%  appearance (using the same setup as in \pkg{article}).
%    \begin{macrocode}
\newcounter { section }
\newcounter { subsection } [ section ]
\newcounter { subsubsection } [ subsection ]
\cs_gset:Npn \thesection { \@arabic \c@section }
\cs_gset:Npn \thesubsection { \thesection . \@arabic \c@subsection }
\cs_gset:Npn \thesubsubsection { \thesubsection . \@arabic \c@subsubsection }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\section, \subsection, \subsubsection}
% \begin{macro}
%   {
%     \insertsection       ,
%     \insertsubsection   ,
%     \insertsubsubsection
%   }
%  The sectioning commands all have essentially the same form: we therefore
%  create using a generator with the necessary conditionals in place. As we
%  do not typeset sections at this stage, the code is quite different from
%  \pkg{article}. This also means that the bookmark links need to point forward
%  to the next slide: if that doesn't appear, the bookmarks will be out.
%    \begin{macrocode}
\clist_map_inline:nn { section , subsection , subsubsection }
  {
    \use:e
      {
        \NewDocumentCommand \exp_not:c { insert #1 } { }
          {
            \exp_not:N \tl_use:N
            \exp_not:c { l_@@_ #1 _tl }
          }
        \NewDocumentCommand \exp_not:c {#1}
          { s D <> { all } O {##4} m }
          {
            \exp_not:N \refstepcounter {#1}
            \tag_tool:n { sec-start = #1 , restore-para }
            \tl_set:Nn \exp_not:c { l_@@_ #1 _tl } {##4}
            \str_if_eq:nnT {#1} { section }
              { \tl_clear:N \exp_not:N \l_@@_subsection_tl }
            \str_if_eq:nnF {#1} { subsubsection }
              { \tl_clear:N \exp_not:N \l_@@_subsubsection_tl }
            \exp_not:N \bookmark
              [
                dest =
                  \exp_not:n
                    {
                      slide .
                      \int_eval:n { \g_@@_frame_int + 1 } . 1
                    }
              ]
              {##3}
            \hook_use:n { #1 / begin }
          }
        \hook_new:n { #1 / begin }
      }
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{variable}{\g_@@_frame_title_tl, \g_@@_frame_subtitle_tl}
%    \begin{macrocode}
\tl_new:N \g_@@_frame_title_tl
\tl_new:N \g_@@_frame_subtitle_tl
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\frametitle}
%   Just data storage: at the present no use of the optional argument.
%    \begin{macrocode}
\NewDocumentCommand \frametitle { D <> { all } O {#3} m }
  {
    \@@_if_overlay:nT {#1}
      { \tl_gset:Nn \g_@@_frame_title_tl {#3} }
  }
\NewDocumentCommand \framesubtitle { D <> { all } O {#3} m }
  {
    \@@_if_overlay:nT {#1}
      { \tl_gset:Nn \g_@@_frame_subtitle_tl {#3} }
  }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\NewTemplateType { frametitle } { 1 }
\DeclareTemplateInterface { frametitle } { xbeamer } { 1 }
  {
    after-skip  : length = \bigskipamount ,
    before-skip : length = 0em ,
    color       : tokenlist = ,
    font        : tokenlist = \Large \bfseries
  }
\DeclareTemplateCode { frametitle } { xbeamer } { 1 }
  {
    after-skip  = \l_@@_frametitle_after_skip ,
    before-skip = \l_@@_frametitle_before_skip ,
    color       = \l_@@_frametitle_color_tl ,
    font        = \l_@@_frametitle_font_tl
  }
  {
    \noindent
    \vspace { \l_@@_frametitle_before_skip }
    \group_begin:
      \tl_if_empty:NF \l_@@_frametitle_color_tl
        { \color_select:V \l_@@_frametitle_color_tl }
      \l_@@_frametitle_font_tl
      #1
      \par
    \group_end:
    \vspace { \l_@@_frametitle_after_skip }
  }
\DeclareInstance { frametitle } { header } { xbeamer } { }
%    \end{macrocode}
%
% \begin{environment}{description, quote, quotation, verse}
%   Stub logical environments: needed as the tagging setup expects these
%   to exist.
%    \begin{macrocode}
\NewDocumentEnvironment { description } { } { } { }
\NewDocumentEnvironment { quote } { } { } { }
\NewDocumentEnvironment { quotation } { } { } { }
\NewDocumentEnvironment { verse } { } { } { }
%    \end{macrocode}
% \end{environment}
%
% \begin{environment}{block}
%    \begin{macrocode}
\NewDocumentEnvironment { block } { D <> { all } m }
  {
    \@@_action_begin:n {#1}
    \vbox_set:Nw \l_@@_tmp_box
      \group_begin:
        \medskip
        \normalfont \large \bfseries
        #2
        \par
        \medskip
      \group_end:
  }
  {
    \vbox_set_end:
    \box_use:N \l_@@_tmp_box
    \@@_action_end:
  }
%    \end{macrocode}
% \end{environment}
%
% \begin{macro}{\item}
% \begin{macro}{\@@_item_parse_spec:w}
% \begin{macro}{\@@_item_parse_spec:n}
%   Again, add the additional argument: here, we have to do a little
%   gymnastics. The test for an overlay has to come after the standard item
%   definition: in a list, items have to \emph{close} the structure before
%   them first, so if we test too early, we'd end up covering then uncovering
%   straight away!
%    \begin{macrocode}
\AddToHook { begindocument / before }
  {
    \NewCommandCopy \stditem \item
    \RenewDocumentCommand \item { d <> = { label } o }
      {
        \IfNoValueTF {#2}
          { \stditem }
          { \stditem [ #2 ] }
        \IfNoValueTF {#1}
          {
            \exp_after:wN \@@_item_parse_spec:w
              \l_@@_action_spec_str < all > \q_stop
          }
          { \@@_item_parse_spec:n {#1} }
      }
  }
%    \end{macrocode}
%   Parsing the spec is a separate function here as there are a couple of
%   routes to get here. At present we only have a \texttt{false} branch, but
%   for spacing we likely will need to add something to the \texttt{true}
%   branch too.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_item_parse_spec:w #1 < #2 > #3 \q_stop
  { \@@_item_parse_spec:n {#2} }
\cs_new_protected:Npn \@@_item_parse_spec:n #1
  {
    \tl_if_blank:nF {#1}
      {
        \tl_set:Nn \l_@@_list_end_tl
          {
            \@@_action_end:
            \tl_clear:N \l_@@_list_end_tl
          }
        \@@_action_begin:n {#1}
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \begin{variable}{\l_@@_list_end_tl}
%    \begin{macrocode}
\tl_new:N \l_@@_list_end_tl
%    \end{macrocode}
% \end{variable}
%  \begin{macro}{\__block_list_item_end:, \__block_list_end:}
%    Currently no hook for this, so we have to do internal patching.
%    \begin{macrocode}
\cs_set:Npe \__block_list_item_end:
  {
    \exp_not:N \l_@@_list_end_tl
    \exp_not:o \__block_list_item_end:
  }
\cs_set:Npe \__block_list_end:
  {
    \exp_not:N \l_@@_list_end_tl
    \exp_not:o \__block_list_end:
  }
%    \end{macrocode}
%  \end{macro}
% Allow for the classical \cls{beamer} syntax.
%    \begin{macrocode}
\AddToHook { begindocument / before }
  {
    \RenewDocumentEnvironment { itemize } { = { action-spec } !o }
      {
        \IfNoValueTF {#1}
          { \UseInstance { blockenv } { itemize } { } }
          { \UseInstance { blockenv } { itemize } {#1} }
      }
      { \endblockenv }
    \RenewDocumentEnvironment { enumerate }{ = { action-spec } !o }
      {
        \IfNoValueTF {#1}
          { \UseInstance { blockenv } { enumerate } { } }
          { \UseInstance { blockenv } { enumerate } {#1} }
      }
      { \endblockenv }
    \RenewDocumentEnvironment { description } { = { action-spec } !o }
      {
        \IfNoValueTF {#1}
          { \UseInstance { blockenv } { description } { } }
          { \UseInstance { blockenv } { description } {#1} }
      }
      { \endblockenv }
  }
%    \end{macrocode}
%
% \begin{variable}{\l_@@_action_spec_str}
%   Add an overlay key to the \texttt{block} template.  Placed here, it applies
%   \emph{before} the \cs{item} starts, so we do not have to redefine the
%   latter to do actions up-front. This also means it can apply to whatever we
%   want it to within a block.
%    \begin{macrocode}
\keys_define:nn { template / block / display  }
  { action-spec .str_set:N = \l_@@_action_spec_str }
%    \end{macrocode}
% \end{variable}
%
%    \begin{macrocode}
%</class>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
